CREATE OR REPLACE PROCEDURE NW_TRANSACTIONS IS 

LOC_FROM NUMBER;
LOC_TO   NUMBER;

CURSOR NW_TRANSACTIONS (FROM_TRAN IN TRANSACTIONS.TRANSACTION_ID%TYPE,TO_TRAN IN TRANSACTIONS.TRANSACTION_ID%TYPE) IS 

      SELECT TRANSACTION_ID,PRODUCT_ID,CUSTOMER_ID,STORE_ID,STORE_NAME,TIME_ID,T_DATE,QUANTITY
      FROM  TRANSACTIONS
      WHERE TRANSACTION_ID BETWEEN FROM_TRAN AND TO_TRAN
      ORDER BY TRANSACTION_ID;

CURSOR NW_INJ (TRANID IN TRANSACTIONS.TRANSACTION_ID%TYPE) IS
      SELECT P.PRODUCT_NAME PRODUCT_NAME, P.SUPPLIER_ID SUPPLIER_ID, P.SUPPLIER_NAME SUPPLIER_NAME, P.PRICE PRICE, C.CUSTOMER_NAME CUSTOMER_NAME
      FROM TRANSACTIONS T
      JOIN PRODUCTS P  ON  T.PRODUCT_ID = P.PRODUCT_ID
      JOIN CUSTOMERS C ON T.CUSTOMER_ID = C.CUSTOMER_ID
      WHERE T.TRANSACTION_ID = TRANID;


CURSOR DIM_CUSTOMERS (CUST_ID IN CUSTOMERS.CUSTOMER_ID%TYPE) IS 
      SELECT CUSTOMER_ID
      FROM D_CUSTOMERS
      WHERE CUSTOMER_ID = CUST_ID;

CURSOR DIM_PRODUCTS (PROD_ID IN PRODUCTS.PRODUCT_ID%TYPE) IS 
      SELECT PRODUCT_ID
      FROM D_PRODUCTS
      WHERE PRODUCT_ID = PROD_ID;

CURSOR DIM_STORES (STOR_ID IN D_STORES.STORE_ID%TYPE) IS 
      SELECT STORE_ID
      FROM D_STORES
      WHERE STORE_ID = STOR_ID;
      
CURSOR DIM_SUPPLIERS (SUPP_ID IN D_SUPPLIERS.SUPPLIER_ID%TYPE) IS 
      SELECT SUPPLIER_ID
      FROM D_SUPPLIERS
      WHERE SUPPLIER_ID = SUPP_ID;
      
CURSOR DIM_TIME (TIM_ID IN D_TIME.TIME_ID%TYPE) IS 
      SELECT TIME_ID
      FROM D_TIME
      WHERE TIME_ID = TIM_ID;

CURSOR FACT_FACTS (TRAN_ID IN W_FACTS.TRANSACTION_ID%TYPE) IS 
      SELECT TRANSACTION_ID
      FROM W_FACTS
      WHERE TRANSACTION_ID = TRAN_ID;

TYPE NW_INLJ IS RECORD (TRANSACTIONID  TRANSACTIONS.TRANSACTION_ID%TYPE,
                        PRODUCTID      PRODUCTS.PRODUCT_ID%TYPE,
                        CUSTOMERID     CUSTOMERS.CUSTOMER_ID%TYPE,
                        TIMEID         D_TIME.TIME_ID%TYPE,
                        STOREID        D_STORES.STORE_ID%TYPE,
                        STORENAME      D_STORES.STORE_NAME%TYPE,
                        TDATE          D_TIME.CAL_DATE%TYPE,
                        QUANTITY       W_FACTS.QUANTITY%TYPE,
                        PRODUCTNAME    D_PRODUCTS.PRODUCT_NAME%TYPE,
                        SUPPLIERID     D_SUPPLIERS.SUPPLIER_ID%TYPE,
                        SUPPLIERNAME   D_SUPPLIERS.SUPPLIER_NAME%TYPE,
                        PRICE          W_FACTS.PRICE%TYPE,
                        SALE           W_FACTS.PRICE%TYPE,
                        CUSTOMERNAME   D_CUSTOMERS.CUSTOMER_NAME%TYPE);
      
TYPE MEMORY_TABLE IS TABLE OF NW_INLJ INDEX BY PLS_INTEGER;

NW_MEMORY MEMORY_TABLE;

BEGIN

FOR P IN 1..100 LOOP
  IF P = 1 THEN
    LOC_FROM := 1;
    LOC_TO := 100;
  ELSE
    LOC_FROM := (LOC_TO + 1);
    LOC_TO := (100*P);
  END IF; --END OF P IF STATEMENT THAT DETERMINES THAT 10000 RECORDS ARE LOADED INTO THE DATAWAREHOUSE
  FOR R IN NW_TRANSACTIONS(LOC_FROM,LOC_TO) LOOP
  
    FOR S IN NW_INJ(R.TRANSACTION_ID) LOOP
      
     IF NW_INJ%NOTFOUND THEN
    
       EXIT;
    
      ELSE
      
          
      NW_MEMORY(R.TRANSACTION_ID).TRANSACTIONID := R.TRANSACTION_ID;
      NW_MEMORY(R.TRANSACTION_ID).PRODUCTID     := R.PRODUCT_ID;
      NW_MEMORY(R.TRANSACTION_ID).CUSTOMERID    := R.CUSTOMER_ID;
      NW_MEMORY(R.TRANSACTION_ID).TIMEID        := R.TIME_ID;
      NW_MEMORY(R.TRANSACTION_ID).STOREID       := R.STORE_ID;
      NW_MEMORY(R.TRANSACTION_ID).STORENAME     := R.STORE_NAME;
      NW_MEMORY(R.TRANSACTION_ID).TDATE         := R.T_DATE;
      NW_MEMORY(R.TRANSACTION_ID).QUANTITY       := R.QUANTITY;
      NW_MEMORY(R.TRANSACTION_ID).PRODUCTNAME   := S.PRODUCT_NAME;
      NW_MEMORY(R.TRANSACTION_ID).SUPPLIERID    := S.SUPPLIER_ID;
      NW_MEMORY(R.TRANSACTION_ID).SUPPLIERNAME  := S.SUPPLIER_NAME;
      NW_MEMORY(R.TRANSACTION_ID).PRICE          := S.PRICE;
      NW_MEMORY(R.TRANSACTION_ID).SALE           := (NVL(S.PRICE,0) * NVL(R.QUANTITY,0));
      NW_MEMORY(R.TRANSACTION_ID).CUSTOMERNAME  := S.CUSTOMER_NAME;
    
    
       END IF;
    
    
    FOR M IN  NW_MEMORY.FIRST..NW_MEMORY.LAST LOOP 
      
      -- INSERT DATA INTO D_CUSTOMERS DIMENSION
      -- CHECK BEFORE INSERTING THE DATA
      
      
      OPEN DIM_CUSTOMERS(NW_MEMORY(M).CUSTOMERID);
      FETCH DIM_CUSTOMERS INTO LOC_CUSTOMERID;
           
      IF DIM_CUSTOMERS%NOTFOUND THEN
      
        INSERT INTO D_CUSTOMERS(CUSTOMER_ID,
                                CUSTOMER_NAME)
                        VALUES  ( NW_MEMORY(M).CUSTOMERID,
                                NW_MEMORY(M).CUSTOMERNAME);
      
       END IF;
       CLOSE DIM_CUSTOMERS;
      -- INSERT DATA INTO D_PRODUCTS DIMENSION
      -- CHECK BEFORE INSERTING THE DATA
      
      OPEN DIM_PRODUCTS(NW_MEMORY(M).PRODUCTID);
      FETCH DIM_PRODUCTS INTO LOC_PRODUCTID;
      
      
      IF DIM_PRODUCTS%NOTFOUND THEN
      
        INSERT INTO D_PRODUCTS(PRODUCT_ID,
                                PRODUCT_NAME)
                        VALUES  ( NW_MEMORY(M).PRODUCTID,
                                NW_MEMORY(M).PRODUCTNAME);
      
      END IF;
      CLOSE DIM_PRODUCTS;
      
      -- INSERT DATA INTO D_STORES DIMENSION
      -- CHECK BEFORE INSERTING THE DATA
      OPEN DIM_STORES(NW_MEMORY(M).STOREID);
      FETCH DIM_STORES INTO LOC_STOREID;
      
      
      IF DIM_STORES%NOTFOUND THEN
      
        INSERT INTO D_STORES(STORE_ID,
                                STORE_NAME)
                        VALUES  ( NW_MEMORY(M).STOREID,
                                NW_MEMORY(M).STORENAME);
      
        END IF;
        CLOSE DIM_STORES;
    -- INSERT DATA INTO D_SUPPLIERS DIMENSION
      -- CHECK BEFORE INSERTING THE DATA
      
      OPEN DIM_SUPPLIERS(NW_MEMORY(M).SUPPLIERID);
      FETCH DIM_SUPPLIERS INTO LOC_SUPPLIERID;
      
      
      IF DIM_SUPPLIERS%NOTFOUND THEN
      
        INSERT INTO D_SUPPLIERS(SUPPLIER_ID,
                                SUPPLIER_NAME)
                        VALUES  ( NW_MEMORY(M).SUPPLIERID,
                                NW_MEMORY(M).SUPPLIERNAME);
        END IF;
        CLOSE DIM_SUPPLIERS;
        
    -- INSERT DATA INTO D_TIME DIMENSION
    -- CHECK BEFORE INSERTING THE DATA
     
      OPEN DIM_TIME(NW_MEMORY(M).TIMEID);
      FETCH DIM_TIME INTO LOC_TIMEID;
        IF DIM_TIME%NOTFOUND THEN
      
      
           INSERT INTO D_TIME(TIME_ID,
                          CAL_DATE,
                          CAL_DAY,
                          CAL_MONTH,
                          CAL_QUARTER,
                          CAL_YEAR)
                  VALUES  (NW_MEMORY(M).TIMEID,
                          NW_MEMORY(M).TDATE,
                          TO_CHAR(NW_MEMORY(M).TDATE,'DAY'),
                          TO_CHAR(NW_MEMORY(M).TDATE,'MONTH'),
                          TO_CHAR(NW_MEMORY(M).TDATE,'Q'),
                          TO_CHAR(NW_MEMORY(M).TDATE,'YYYY'));
      
         END IF; --END OF IF FOR DIM_TIME FOR INSERTING DATA INTO DW
       CLOSE DIM_TIME;
       
      -- INSERT DATA INTO FACT TABLE
      -- CHECK BEFORE INSERTING THE DATA
      OPEN FACT_FACTS(NW_MEMORY(M).TRANSACTIONID);
      FETCH FACT_FACTS INTO LOC_TRAN;
     
      IF FACT_FACTS%NOTFOUND THEN
      
        INSERT INTO W_FACTS(TRANSACTION_ID,
                                CUSTOMER_ID,
                                PRODUCT_ID,
                                STORE_ID,
                                SUPPLIER_ID,
                                TIME_ID,
                                QUANTITY,
                                PRICE,
                                SALE)
                        VALUES  (NW_MEMORY(M).TRANSACTIONID,
                                NW_MEMORY(M).CUSTOMERID,
                                NW_MEMORY(M).PRODUCTID,
                                NW_MEMORY(M).STOREID,
                                NW_MEMORY(M).SUPPLIERID,
                                NW_MEMORY(M).TIMEID,
                                NW_MEMORY(M).QUANTITY,
                                NW_MEMORY(M).PRICE,
                                NW_MEMORY(M).SALE);
        END IF;
         CLOSE FACT_FACTS;
    
      END LOOP; --END M LOOP FOR INSERTING DATA INTO DIMMENSIONS AND A FACT
          
  
    END LOOP; --END OF S LOOP FOR JOIN TRANSACTIONS INTO MEMORY TABLE

  END LOOP;--END OF R LOOP THAT FETCHES DATA FROM THE TRANSACTION TABLES USING THE CURSORS 
COMMIT; --COMMIT AFTER EVERY 100 RECORDS ARE LOADED.
END LOOP; --END OF P LOOP THAT LOADS DATA INTO THE WAREHOUSE TABLES
END NW_TRANSACTIONS; --END OF THE NEW WORLD TRANSACTIONS PROCEDURE